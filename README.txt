    With the last installment of what I am going to retroactively name the twilight saga, I am going to break with literary tradition use this write up as a short love story between the Monad, the Glasgow Haskell Compiler and myself. It is a very short story that ends with no single bond stronger than the bond I formed with the delete button. And while the typical department store romance novels have a plot ark this one unfortunately does not.
- - - - - - - - - - - - - - - - - - - - - -

 A learned Interpreter for the Renaissance Man

    Our interpreter began its life with a whimper. Haskell being the only real language left to choose had left a bad taste in our mouths after pa1. This taste would slowly go away as we gradually drank more and more of the cool aid. But at the beginning, all we had was the opposite of boundless excitement and the GHCi.
    This was the mindset upon which we started our final and ultimate quest and it worked out pretty well. Our first serious pass at the interpreter involved abusing the tree parsing code we had written for PA4. Haskell like Ocaml let us easily parse the important bits of any cl-type file with relative ease and hundreds of lines of code.
    With the implementation map and class map loaded up as Maps in Haskell's memory we were ready to call (new Main).main() and have it print “hello world” for the entire grading server to see. But before we could do that, we had to realize that (new Main) was actually a rather large and complicated beast. Missed deadlines and error throwing code that happened to print “hello world” aside we bested this foe. 
    With the checkpoint slain, (new Main) and copy worked exactly the way we wanted them to work. And yet it was not exactly how they were supposed to work. You see, ever since the beginning of the course the bold and dashing members of our team had been confused by how cool actually initialized and copied values. Was it pass by reference or pass by value? What really constitutes a Cool Value? What did the reference interpreter actually do? We could seemingly construct examples and counter examples at will proving the other wrong at every step. 
    The only thing that had the insight to untangle this Gordian knot were the denizens of a morass created by a group of San Fransisco based college graduates. Using their online class facilitation web software product we were finally convinced that the answer lay in the cryptic words of 'the instructor.' After hearing these wise words we became enlightened. Cool copies objects by reference and primitives by value and so in our implementation we copy everything and it works flawlessly. 
    And again much later, after many years of struggle, the troll like hobgoblins of that internet cave came to our aid and saved us from a pit of doom and despair known as the Monad. Much like the Sarlacc pit in the final Stars Wars (episode 6) , the Monad consumes all who try to delve into it. However, after being handed proper spelunking gear and a worked example by the mysterious and helpful 'rolph' we descended into the Monad itself. After some time among the Monoids, it was not the IO Monad alone that we ended up constructing, but a state transformer that handled both our store and the intractable Haskell IO simultaneously. And so we formed a platonic love for this inexplicable monster.
    Thanks to these total strangers our interpreter could now recursively execute arbitrary cool programs and update all of its state by simply returning. It understood enough logic to simulate any other simulator and it was far more importantly printing “Hello world.” Few things could have prepared us for what followed next. Just implementing just the core functionality of cool gets you past most of the prompts the ancient centos box uses to judge students understanding. So after submitting to the wise and cruel centos, it told us that we were all but done.
    With exception handling and edge cases left to implement. We only had our tests to depend on and as we made the final ascent to a submittable assignment few things held us back from getting the grade we so desperately wanted. However nothing short of a 115 on the interpreter would put me into that fabled A range where Nooglers frollic. So with our positive test case which was merely our first assignment resubmitted for the upteenth time and our negative case which demonstrated a stack overflow and the problems with copy that we so dearly confused, we turned in our project and took to the great outdoors.
                                        I thought this was an excellent class. Thank you.
